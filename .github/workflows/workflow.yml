name: Docker Build and Push

# 워크플로우가 실행될 조건 정의
on:
  push:
    branches:
      - main  # main 브랜치에 push될 때 실행
  pull_request:
    branches:
      - main  # main 브랜치로 PR이 생성될 때 실행

# 환경 변수 정의
env:
  DOCKERHUB_USERNAME: raelukang
  IMAGE_NAME: mp3-extractor
  PLATFORMS: linux/amd64

jobs:
  # PR 시: 빌드 및 테스트만 수행
  # Push 시: 빌드, 테스트 후 이미지 푸시
  build-and-deploy:
    runs-on: ubuntu-latest
    
    # 작업 실행 단계들
    steps:
      # 1. 소스 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 전체 git 히스토리를 가져옴 (태그 정보 등을 위해)
      
      # 2. Docker Buildx 설정 (고급 빌드 기능 및 캐싱을 위해)
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      # 3. Docker Hub에 로그인 (main 브랜치 push시에만)
      - name: Login to Docker Hub
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      
      # 4. 메타데이터 추출 (태그, 라벨 등)
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKERHUB_USERNAME }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=raw,value=latest,enable={{is_default_branch}}
            type=raw,value={{date 'YYYYMMDD'}}
          labels: |
            org.opencontainers.image.title=${{ env.IMAGE_NAME }}
            org.opencontainers.image.description=YouTube MP3 Extractor Application
            org.opencontainers.image.vendor=${{ env.DOCKERHUB_USERNAME }}
      
      # 5. Docker 이미지 빌드 
      - name: Build Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .  # 빌드 컨텍스트는 현재 디렉토리
          file: ./Dockerfile  # 사용할 Dockerfile 경로
          platforms: ${{ env.PLATFORMS }}  # 빌드할 플랫폼들
          push: false  # 빌드만 하고 푸시하지 않음
          load: true   # 로컬에서 테스트할 수 있도록 이미지 로드
          tags: ${{ steps.meta.outputs.tags }}  # 추출된 태그들 사용
          labels: ${{ steps.meta.outputs.labels }}  # 추출된 라벨들 사용
          cache-from: type=gha  # GitHub Actions 캐시 사용
          cache-to: type=gha,mode=max  # 빌드 캐시를 GitHub Actions에 저장
      
      # 6a. PR용 이미지 테스트 (테스트 후 정리)
      - name: Test Docker image (PR)
        if: github.event_name == 'pull_request'
        run: |
          echo "[INFO] PR Testing - Available images:"
          docker images
          
          # 방금 빌드한 이미지 검증
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "[INFO] Testing PR image: $IMAGE_TAG"
          
          # 특정 태그의 이미지가 존재하는지 확인
          if docker image inspect $IMAGE_TAG >/dev/null 2>&1; then
            echo "[OK] PR image $IMAGE_TAG exists and is ready for testing"
          else
            echo "[ERROR] PR image $IMAGE_TAG not found!"
            exit 1
          fi
          
          # 컨테이너 실행 및 테스트
          docker run -d --name test-app -p 5001:5001 $IMAGE_TAG
          sleep 30
          curl -f http://localhost:5001/ || (echo "[ERROR] PR health check failed" && exit 1)
          docker logs --tail 100 test-app

          echo "[OK] PR image test completed successfully!"
      
      # 6b. Push용 이미지 테스트 (테스트 후 이미지 보존)
      - name: Test Docker image (Push)
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "[INFO] Push Testing - Available images:"
          docker images
          
          # 방금 빌드한 이미지 검증
          IMAGE_TAG=$(echo "${{ steps.meta.outputs.tags }}" | head -n1)
          echo "[INFO] Testing Push image: $IMAGE_TAG"
          
          # 특정 태그의 이미지가 존재하는지 확인
          if docker image inspect $IMAGE_TAG >/dev/null 2>&1; then
            echo "[OK] Push image $IMAGE_TAG exists and is ready for testing"
          else
            echo "[ERROR] Push image $IMAGE_TAG not found!"
            exit 1
          fi
          
          # 컨테이너 실행 및 테스트
          docker run -d --name test-app -p 5001:5001 $IMAGE_TAG
          sleep 30
          curl -f http://localhost:5001/ || (echo "[ERROR] Push health check failed" && exit 1)
          docker logs --tail 100 test-app
          
          # 정리 (컨테이너만, 이미지는 푸시를 위해 보존)
          docker stop test-app
          docker rm test-app
          echo "[OK] Push image test completed successfully!"
      
      # 7a. PR 후 이미지 정리
      - name: Clean up PR containers and images 
        if: github.event_name == 'pull_request'
        run: |
          echo "[INFO] Cleaning up PR test containers and images..."
          
          docker stop test-app
          docker rm test-app
          
          docker image prune -f
          echo "[INFO] PR cleanup completed"


      # 7b. 테스트 성공 후 이미지 푸시 (main 브랜치에서만)
      - name: Push Docker image to registry
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: ${{ env.PLATFORMS }}
          push: true  # 이제 푸시 실행
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      # 8. 푸시 완료 메시지 및 이미지 정리
      - name: Push completed and cleanup
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        run: |
          echo "[OK] Image successfully pushed to Docker Hub after passing tests"
          echo "[INFO] Cleaning up local images after successful push..."
          docker image prune -f
          echo "[INFO] Final cleanup completed"